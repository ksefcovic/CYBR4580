{"ast":null,"code":"import { railsActions } from 'redux-rails';\nimport { ApiHelper } from '../ApiHelper';\nimport { addDevice, addNewDeviceSuccess, addNewDeviceFailed, removeDeviceSuccess, removeDeviceFailed, updateDeviceStatus, updateDeviceStatusSuccess, updateDeviceStatusFailed, setLoading } from './actions';\nimport axios from 'axios';\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    onAddDevice: function onAddDevice(userId, name, device_type_id) {\n      dispatch(setLoading(true));\n      axios.post(ApiHelper.ADD_DEVICE_ENDPOINT, {\n        user_id: userId,\n        name: name,\n        device_type_id: device_type_id\n      }).then(function (response) {\n        dispatch(addNewDeviceSuccess(response.data.device));\n        dispatch(setLoading(false));\n      })[\"catch\"](function (error) {\n        dispatch(addNewDeviceFailed(error));\n        dispatch(setLoading(false));\n      });\n    },\n    onRemoveDevice: function onRemoveDevice(deviceId, userId) {\n      dispatch(setLoading(true));\n      axios[\"delete\"](ApiHelper.REMOVE_DEVICE_ENDPOINT(deviceId)).then(function (response) {\n        console.log(\"SUCCES!\", response);\n        dispatch(removeDeviceSuccess(response.data.devices));\n        dispatch(setLoading(false));\n      })[\"catch\"](function (error) {\n        console.log(\"ERROR!\", error);\n        dispatch(setLoading(false));\n      });\n    },\n    onUpdateDeviceStatus: function onUpdateDeviceStatus(deviceId, status) {\n      dispatch(setLoading(true));\n      axios.patch(ApiHelper.UPDATE_STATUS_ENDPOINT(deviceId), {\n        status: status\n      }).then(function (response) {\n        console.log(\"SUCCES!\", response);\n        dispatch(updateDeviceStatusSuccess(response));\n        dispatch(setLoading(false));\n      })[\"catch\"](function (error) {\n        console.log(\"ERROR!\", error);\n        dispatch(updateDeviceStatusFailed(error));\n        dispatch(setLoading(false));\n      });\n    }\n  };\n};\n\nexport default mapDispatchToProps;","map":{"version":3,"sources":["/Users/laurenshultz/Dev/web/CYBR4580/find_my_device_app/application/app/javascript/components/dispatch.js"],"names":["railsActions","ApiHelper","addDevice","addNewDeviceSuccess","addNewDeviceFailed","removeDeviceSuccess","removeDeviceFailed","updateDeviceStatus","updateDeviceStatusSuccess","updateDeviceStatusFailed","setLoading","axios","mapDispatchToProps","dispatch","onAddDevice","userId","name","device_type_id","post","ADD_DEVICE_ENDPOINT","user_id","then","response","data","device","error","onRemoveDevice","deviceId","REMOVE_DEVICE_ENDPOINT","console","log","devices","onUpdateDeviceStatus","status","patch","UPDATE_STATUS_ENDPOINT"],"mappings":"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","sourcesContent":["import { railsActions } from 'redux-rails'\nimport { ApiHelper } from '../ApiHelper'\nimport { \n    addDevice, \n    addNewDeviceSuccess, \n    addNewDeviceFailed, \n    removeDeviceSuccess,\n    removeDeviceFailed,\n    updateDeviceStatus,\n    updateDeviceStatusSuccess,\n    updateDeviceStatusFailed,\n    setLoading\n} from './actions';\nimport axios from 'axios';\n\nconst mapDispatchToProps = dispatch => {\n    return {\n      onAddDevice: (userId, name, device_type_id) => {\n        dispatch(setLoading(true))\n        axios.post(ApiHelper.ADD_DEVICE_ENDPOINT, { user_id: userId, name: name, device_type_id })\n        .then(function (response) {\n            dispatch(addNewDeviceSuccess(response.data.device))\n            dispatch(setLoading(false))\n        })\n        .catch(function (error) {\n            dispatch(addNewDeviceFailed(error))\n            dispatch(setLoading(false))\n        });\n      },\n      onRemoveDevice: (deviceId, userId) => {\n        dispatch(setLoading(true))\n        axios.delete(ApiHelper.REMOVE_DEVICE_ENDPOINT(deviceId))\n        .then(function (response) {\n            console.log(\"SUCCES!\", response);\n            dispatch(removeDeviceSuccess(response.data.devices))\n            dispatch(setLoading(false))\n        })\n        .catch(function (error) {\n            console.log(\"ERROR!\", error);\n            dispatch(setLoading(false))\n        });\n      },\n      onUpdateDeviceStatus: (deviceId, status) => {\n        dispatch(setLoading(true))\n        axios.patch(ApiHelper.UPDATE_STATUS_ENDPOINT(deviceId), { status })\n        .then(function (response) {\n            console.log(\"SUCCES!\", response);\n            dispatch(updateDeviceStatusSuccess(response))\n            dispatch(setLoading(false))\n        })\n        .catch(function (error) {\n            console.log(\"ERROR!\", error);\n            dispatch(updateDeviceStatusFailed(error))\n            dispatch(setLoading(false))\n        });\n      }\n    }\n}\n\nexport default mapDispatchToProps;\n"]},"metadata":{},"sourceType":"module"}