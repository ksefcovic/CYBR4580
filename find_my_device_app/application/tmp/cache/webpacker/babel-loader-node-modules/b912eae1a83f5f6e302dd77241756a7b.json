{"ast":null,"code":"var _jsxFileName = \"/Users/laurenshultz/Dev/web/CYBR4580/find_my_device_app/application/app/javascript/components/homePage/DevicePane.jsx\";\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nimport React, { useState } from \"react\";\nimport DeviceListPane from './DeviceListPane';\nimport DeviceDetailWindow from './DeviceDetailWindow';\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\nimport { useSelector, createSelector } from 'react-redux';\n\nvar DevicePane = function DevicePane(_ref) {\n  var user = _ref.user,\n      devices = _ref.devices,\n      styles = _ref.styles,\n      addNewDevice = _ref.addNewDevice,\n      updateDeviceStatus = _ref.updateDeviceStatus,\n      onRemoveDevice = _ref.onRemoveDevice,\n      deviceTypes = _ref.deviceTypes;\n\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      focusedDeviceIndex = _useState2[0],\n      setFocusedDeviceIndex = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      focusedDevice = _useState4[0],\n      setFocusedDevice = _useState4[1];\n\n  var getFocusedDeviceIndex = function getFocusedDeviceIndex() {\n    var index = 0;\n\n    if (devices == null || devices.length == 0) {\n      return null;\n    }\n\n    if (focusedDevice == null) {\n      return 0;\n    }\n\n    for (index = 0; index < devices.length; index++) {\n      if (devices[index].id == focusedDevice.id) {\n        return index;\n      }\n    }\n\n    return 0;\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n    className: \"mainHomeLayout\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, React.createElement(DeviceListPane, Object.assign({\n    className: \"deviceList\"\n  }, {\n    user: user,\n    focusedDevice: getFocusedDeviceIndex() != null ? devices[getFocusedDeviceIndex()] : null,\n    setFocusedDevice: setFocusedDevice,\n    devices: devices ? devices : [],\n    styles: styles,\n    addNewDevice: addNewDevice,\n    deviceTypes: deviceTypes\n  }, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  })), React.createElement(DeviceDetailWindow, Object.assign({\n    className: \"deviceDetailCard\"\n  }, {\n    focusedDevice: getFocusedDeviceIndex() != null ? devices[getFocusedDeviceIndex()] : null,\n    styles: styles,\n    addNewDevice: addNewDevice,\n    updateDeviceStatus: updateDeviceStatus,\n    onRemoveDevice: onRemoveDevice\n  }, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }))));\n}; // Base Redux Implementation\n\n\nfunction getTest() {\n  return {\n    type: 'GET_TEST_REQUEST'\n  };\n}\n\n;\nvar structuredSelector = createStructuredSelector({\n  test: function test(state) {\n    return state.test;\n  }\n});\nvar mapDispatchToProps = {\n  getTest: getTest\n};\nexport default connect(structuredSelector, mapDispatchToProps)(DevicePane);","map":{"version":3,"sources":["/Users/laurenshultz/Dev/web/CYBR4580/find_my_device_app/application/app/javascript/components/homePage/DevicePane.jsx"],"names":["React","useState","DeviceListPane","DeviceDetailWindow","connect","createStructuredSelector","useSelector","createSelector","DevicePane","user","devices","styles","addNewDevice","updateDeviceStatus","onRemoveDevice","deviceTypes","focusedDeviceIndex","setFocusedDeviceIndex","focusedDevice","setFocusedDevice","getFocusedDeviceIndex","index","length","id","getTest","type","structuredSelector","test","state","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\"\nimport DeviceListPane from './DeviceListPane'\nimport DeviceDetailWindow from './DeviceDetailWindow'\n\nimport { connect } from 'react-redux'\nimport { createStructuredSelector } from 'reselect'\nimport { useSelector, createSelector } from 'react-redux'\n\nconst DevicePane = ({\n    user,\n    devices,\n    styles,\n    addNewDevice,\n    updateDeviceStatus,\n    onRemoveDevice,\n    deviceTypes\n}) => {\n    const [focusedDeviceIndex, setFocusedDeviceIndex] = useState(0);\n    const [focusedDevice, setFocusedDevice] = useState(null)\n\n    const getFocusedDeviceIndex = () => {\n        let index = 0;\n        if (devices == null || devices.length == 0) {\n            return null;\n        }\n        if (focusedDevice == null) {\n            return 0;\n        }\n        for  (index = 0; index < devices.length; index++) {\n            if (devices[index].id == focusedDevice.id) {\n                return index;\n            }\n        }\n        return 0;\n    }\n\n    return (\n        <>\n        <div className=\"mainHomeLayout\">\n            <DeviceListPane className=\"deviceList\" {...{\n              user,\n              focusedDevice: (getFocusedDeviceIndex() != null)\n                                ? devices[getFocusedDeviceIndex()]\n                                : null,\n              setFocusedDevice,\n              devices: devices ? devices : [],\n              styles,\n              addNewDevice,\n              deviceTypes\n            }}></DeviceListPane>\n            <DeviceDetailWindow className=\"deviceDetailCard\" {...{\n              focusedDevice: (getFocusedDeviceIndex() != null)\n              ? devices[getFocusedDeviceIndex()]\n              : null,\n              styles,\n              addNewDevice,\n              updateDeviceStatus,\n              onRemoveDevice\n            }}></DeviceDetailWindow>\n          </div>\n        </>\n    )\n}\n\n// Base Redux Implementation\nfunction getTest() {\n    return {\n        type: 'GET_TEST_REQUEST'\n    };\n};\n\nconst structuredSelector = createStructuredSelector ({\n    test: state => state.test,\n});\n\nconst mapDispatchToProps = { getTest };\n\nexport default connect(structuredSelector, mapDispatchToProps)(DevicePane);\n"]},"metadata":{},"sourceType":"module"}